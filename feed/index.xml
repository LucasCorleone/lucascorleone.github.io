<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tyler Benziger's Blog</title>
    <description>Tyler rants about things</description>
    <link>http://tybenz.com</link>
    <atom:link href="http://tybenz.com/feed.xml" rel="self" type="application/rss+xml" />
    
      
    
      
        <item>
          <title>Presentation: CSS Layout</title>
          <description>&lt;p&gt;I presented on new CSS Layout features at a Game and App Devs Meetup group at Adobe SF tonight.
Here are the slides for my presentation:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tybenz.com/presentation-css-layout&quot;&gt;Finally! Layout in CSS&lt;/a&gt;&lt;/p&gt;
</description>
          <pubDate>Tue, 04 Feb 2014 00:00:00 -0800</pubDate>
          <link>http://tybenz.com//post/presentation-css-layout</link>
          <guid isPermaLink="true">http://tybenz.com//post/presentation-css-layout</guid>
        </item>
      
    
      
        <item>
          <title>My Hour Of Code</title>
          <description>&lt;p&gt;This past week was &lt;a href=&quot;http://code.org&quot;&gt;code.org&amp;#39;s&lt;/a&gt; first &lt;a href=&quot;http://csedweek.org&quot;&gt;Computer Science Education Week&lt;/a&gt;. They set a goal of getting 10 million students worldwide to participate
in an hour of code (they ended up with over 16 million). Code.org and many other participating organizations created self-guided tutorials to walk students through the fundamentals
of programming.&lt;/p&gt;

&lt;p&gt;I was able to help out at a &lt;a href=&quot;http://hcs.hickmanschools.org&quot;&gt;Hickman Charter School&lt;/a&gt; by adding a short presentation on what code is all about. I&amp;#39;m extrememly appreciative of
code.org&amp;#39;s efforts to educate young people on such an important topic. Here&amp;#39;s some photos from the event:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/tybenz/awes0.me/gh-pages/hoc1.jpg&quot; alt=&quot;&quot;&gt;
&lt;img src=&quot;https://raw.github.com/tybenz/awes0.me/gh-pages/hoc2.jpg&quot; alt=&quot;&quot;&gt;
&lt;img src=&quot;https://raw.github.com/tybenz/awes0.me/gh-pages/hoc3.jpg&quot; alt=&quot;&quot;&gt;
&lt;img src=&quot;https://raw.github.com/tybenz/awes0.me/gh-pages/hoc4.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</description>
          <pubDate>Mon, 16 Dec 2013 00:00:00 -0800</pubDate>
          <link>http://tybenz.com//post/my-hour-of-code</link>
          <guid isPermaLink="true">http://tybenz.com//post/my-hour-of-code</guid>
        </item>
      
    
      
        <item>
          <title>VIM as a presentation tool</title>
          <description>&lt;p&gt;I made a thing. It&amp;#39;s called &lt;a href=&quot;https://raw.github.com/tybenz/vimdeck/master/img/demo3.png&quot;&gt;Vimdeck&lt;/a&gt;
and it lets you write a presentation
in a single markdown file and then converts that file into multiple &amp;quot;slides&amp;quot;
to be opened and shared in VIM.&lt;/p&gt;

&lt;p&gt;Buffers as slides. Genius, no? Plus, I added some ascii art conversion stuff too.&lt;/p&gt;

&lt;p&gt;Head over to the &lt;a href=&quot;http://github.com/tybenz/vimdeck&quot;&gt;GitHub page&lt;/a&gt; to check it out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/tybenz/vimdeck/master/img/demo3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</description>
          <pubDate>Thu, 19 Sep 2013 00:00:00 -0700</pubDate>
          <link>http://tybenz.com//post/vimdeck-vim-as-a-presentation-tool</link>
          <guid isPermaLink="true">http://tybenz.com//post/vimdeck-vim-as-a-presentation-tool</guid>
        </item>
      
    
      
        <item>
          <title>Presentation: Widget-ize</title>
          <description>&lt;p&gt;I&amp;#39;m headed to &lt;a href=&quot;http://frontporch.com&quot;&gt;Frontporch&lt;/a&gt; in Sonora, CA to the &lt;a href=&quot;http://www.meetup.com/The-Sonora-Software-Developers-Group/&quot;&gt;Sonora Software
Developers Group Meetup&lt;/a&gt; to give a presentation
based on my &lt;a href=&quot;http://tybenz.com/post/widgetize-all-the-things&quot;&gt;widget-ize&lt;/a&gt; blog post.&lt;/p&gt;

&lt;p&gt;The slides can be found here: &lt;a href=&quot;http://tybenz.com/presentation-widgetize&quot;&gt;http://tybenz.com/presentation-widgetize&lt;/a&gt;&lt;/p&gt;
</description>
          <pubDate>Tue, 27 Aug 2013 00:00:00 -0700</pubDate>
          <link>http://tybenz.com//post/presentation-widget-ize</link>
          <guid isPermaLink="true">http://tybenz.com//post/presentation-widget-ize</guid>
        </item>
      
    
      
        <item>
          <title>Widget-ize All The Things!</title>
          <description>&lt;p&gt;&lt;strong&gt;Reduce, reuse, refactor.&lt;/strong&gt; That&amp;#8217;s what we do as developers &lt;em&gt;all day&lt;/em&gt;.
The &lt;strong&gt;reduce&lt;/strong&gt; and &lt;strong&gt;refactor&lt;/strong&gt; are obvious necessities, and admittedly some of the most fun and/or
most painful parts of the job. In my experience, the &lt;strong&gt;reuse&lt;/strong&gt; goal is often the easiest to 
acheive. Yet, somehow, it is often the one most ignored, in the name of
&amp;quot;iterative development&amp;quot;. Trust me, nothing helps you iterate more
quickly than
writing things in a generic and reusable way the &lt;em&gt;first&lt;/em&gt; time.&lt;/p&gt;

&lt;p&gt;In my experience writing code to be purposefully reusable is fun,
challenging, and incredibly useful. I want to outline what writing
solid, reusable front-end web components should look like.&lt;/p&gt;

&lt;p&gt;There are 3 different approaches when it comes to solving a UI problem or implementing a common UI pattern.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Blackbox&lt;/li&gt;
&lt;li&gt;Framework-based&lt;/li&gt;
&lt;li&gt;The sweet spot&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;toc_4&quot;&gt;Blackbox&lt;/h4&gt;

&lt;p&gt;The blackbox approach is one that &lt;em&gt;every&lt;/em&gt; web developer is familiar with.
What I&amp;#8217;m referring to is a UI-based plugin that solves a problem, but
might require specific markup structure,
or an entire 300 lines of code to accomplish something you could have done in 20. It&amp;#8217;s a plugin you grab and throw
in your app/site and it&amp;#8217;s supposed to just &amp;quot;work&amp;quot;. And it does for the most part. The convenience is tempting.&lt;/p&gt;

&lt;p&gt;The problem comes when you want to customize/extend the thing to do a
little something extra. Most plugins don&amp;#8217;t leave room for
interaction with the plugin itself. Sure, you got a slideshow widget by
downloading a couple of files, but what good is it if it&amp;#8217;s not
fully customizable?&lt;/p&gt;

&lt;h4 id=&quot;toc_5&quot;&gt;Enter the example&lt;/h4&gt;

&lt;p&gt;The example I&amp;#8217;ll be using throughout this post is what I call a &amp;quot;secret&amp;quot;
widget. The pattern we&amp;#39;re going for is simple: mousedown -&amp;gt; add a class,
mouseup -&amp;gt; remove a class. That class can do whatever it wants in CSS.
We&amp;#8217;re going to have it hide/show a child element (thus the name
&amp;quot;secret&amp;quot;).
Let&amp;#8217;s take a look at the blackbox approach to this widget:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mousedown&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;show&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mouseup&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;show&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Live demo &lt;a href=&quot;/demos/widgetize/secret.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an example of a typical jQuery plugin*. It has no options,
and very simple widget logic. What if I wanted to use different events
other than mousedown/mouseup? What if I want some other piece of an
application to perform an action when the class is applied? There&amp;#39;s
nothing external for integration and not enough options for it to do
what I want.&lt;/p&gt;

&lt;h4 id=&quot;toc_6&quot;&gt;Framework-based&lt;/h4&gt;

&lt;p&gt;Next up is the framework-based approach to writing components. I&amp;#8217;m
personally a big fan of MVC in app development. But, when it comes to
writing UI components, there&amp;#8217;s one thing I get annoyed with
often &amp;mdash; if you do it the &amp;quot;framework&amp;quot; way, it&amp;#8217;s less reusable by
definition.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s an example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Backbone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;mousedown&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;apply&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;mouseup&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;remove&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;show&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;show&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that there are no options at all in this view. This is because
it&amp;#8217;s custom-made for this application and we (ideally) know what our requirements are
while growing the codebase.&lt;/p&gt;

&lt;p&gt;There&amp;#8217;s an even bigger problem here, we&amp;#8217;ve just rewritten a common UI
widget in a very specific &amp;quot;Backbone-y&amp;quot; way. All reusability is gone
(outside of another Backbone project that is). Converting
this code into a more flexible widget will take time and effort.&lt;/p&gt;

&lt;h4 id=&quot;toc_7&quot;&gt;The Sweet Spot&lt;/h4&gt;

&lt;p&gt;That&amp;#8217;s where option #3 comes in. The compromise between isolated,
they-just-work plugins and event-driven MVC-friendly components. A solid
reusable widget should have the following criteria:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Options (and defaults)&lt;/li&gt;
&lt;li&gt;Browser/User events&lt;/li&gt;
&lt;li&gt;Widget Logic&lt;/li&gt;
&lt;li&gt;External events&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;#8217;s take a look at some code within the constructor of our
widget:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defaultOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applyEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// apply/remove are just calling addClass/removeClass respectively&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;secret-apply&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;secret-remove&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we have a component that is customizable with options, that does its
job as it&amp;#8217;s supposed to and that provides ways for other pieces of an
application to hook into and modify its behavior.&lt;/p&gt;

&lt;h4 id=&quot;toc_8&quot;&gt;Time to extend&lt;/h4&gt;

&lt;p&gt;Let&amp;#8217;s try to extend this widget&amp;#39;s behavior. What if I had two divs
on the page each with their own secret? And, let&amp;#8217;s say I want to
show both secrets when I mousedown the first div.
With our new event-based widget, it&amp;#8217;s simple:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secret1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;#secret1&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;secret2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;#secret2&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;secret1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;secret-apply&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;secret2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;secret1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;secret-remove&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;secret2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Live demo &lt;a href=&quot;/demos/widgetize/secret4.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Notice that the secret widget does it&amp;#8217;s normal thing. It&amp;#8217;s really good
at applying/removing classes, but it also fires events when those things
happens. This let&amp;#8217;s us write a bit of code to create the master/slave
relationship. If we want, we could even package this new behavior as a
widget.&lt;/p&gt;

&lt;p&gt;Slick huh? Now you&amp;#8217;ve got a widget that can handle a simple UI pattern,
and it&amp;#8217;s customizable/extensible enough to do something &lt;em&gt;really&lt;/em&gt; useful.&lt;/p&gt;

&lt;p&gt;Also, if you haven&amp;#8217;t noticed, our example widget is extremely
simple. But I wanted to show how small components can be used to do cool
things (especially when they leverage CSS).
&lt;a href=&quot;/demos/widgetize/secret5.html&quot; target=&quot;_blank&quot;&gt;Here&amp;#8217;s&lt;/a&gt; an example I made to show
that. The example consists of a whole bunch of secret widgets lined up side-by-side.
Each widget contains an image and the widget&amp;#8217;s applyClass toggle&amp;#39;s
the visibility of the image. I&amp;#39;m also using some CSS trickery here to
shift the child image a certain amount so that they all have the same
top and left coordinates. We use the events mouseover and mouseout for this one,
giving the effect that hovering over the image from left/right scrubs a
rotating animation.&lt;/p&gt;

&lt;h4 id=&quot;toc_9&quot;&gt;Wrap up&lt;/h4&gt;

&lt;p&gt;In my experience amassing an arsenal of these small pattern-based
reusable bits of code can really make working on any application so much
easier. Give it a try and you&amp;#8217;ll find that building out a library of
these types of components is extremely rewarding and in general, it will
make you a better developer. And if you don&amp;#8217;t have the time to
roll your own, I hope you&amp;#8217;ll at least
research some widget-based frameworks and begin to &amp;quot;think reusable&amp;quot; when
faced with a UI problem.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve tried to lay out what I think is a template for simple, but
powerful components so that you can go forth and widgetize all of your UI.
As always feel free to submit any comments/questions on
&lt;a href=&quot;http://twitter.com/tybenz&quot;&gt;Twitter&lt;/a&gt;. Also, I&amp;#8217;ll be giving a talk
on this very topic at a meetup with the &lt;a href=&quot;http://www.meetup.com/The-Sonora-Software-Developers-Group/&quot;&gt;Sonora Software Developers
Group&lt;/a&gt; next Month.
If you happen to be near the Central Valley/Foothills, swing by.&lt;/p&gt;

&lt;p&gt;* To clarify, I have nothing against jQuery plugins. In my experience
most jQuery plugins are written to solve a specific problem. They do
their job well but they don&amp;#8217;t necessarily provide
the options and events to modify/extend behavior.&lt;/p&gt;
</description>
          <pubDate>Mon, 08 Jul 2013 00:00:00 -0700</pubDate>
          <link>http://tybenz.com//post/widgetize-all-the-things</link>
          <guid isPermaLink="true">http://tybenz.com//post/widgetize-all-the-things</guid>
        </item>
      
    
      
        <item>
          <title>Gitwar: Gaming with Git</title>
          <description>&lt;p&gt;I recently came across a &lt;a href=&quot;https://github.com/blog/1499-the-revolution-will-be-forked&quot;&gt;blog
post&lt;/a&gt; that talked about non-developers using Git and GitHub to
do some pretty cool things. It got me thinking about other cool and unsual
things possible with GitHub.&lt;/p&gt;

&lt;p&gt;Then I started thinking about games and wondered what it would look like
to have a game with Git at the center. Not something as lame as &amp;quot;who can
create the most branches with the most inappropriate names in the
shortest amount of time?&amp;quot; More like a family of two-player,
head-to-head, text-based, turn-based games with Git as the transfer
protocol.&lt;/p&gt;

&lt;p&gt;So I made one, and I did it all in &lt;strong&gt;BASH&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The games are built using a &amp;quot;platform&amp;quot; called
&lt;a href=&quot;http://github.com/gitwar/gitwar&quot;&gt;Gitwar&lt;/a&gt;. It&amp;#39;s a shared
utility that takes care of adding, committing, pushing, and pulling
to/from the shared repo.&lt;/p&gt;

&lt;p&gt;The first game is called
&lt;a href=&quot;http://github.com/gitwar/gitwar/tree/master/gitfight&quot;&gt;Gitfight&lt;/a&gt; and it&amp;#39;s an incredibly simple/corny game where
you tell the game what kind of punch you&amp;#39;d like to throw at your
opponent and basically roll a virtual die to see how much damage you
deal. After you submit your punch, Gitwar takes over and commits that
action to your repo and your opponent can have a chance to punch back.&lt;/p&gt;

&lt;p&gt;The second game was an obvious choice. It&amp;#39;s called
&lt;a href=&quot;http://github.com/gitwar/gitwar/tree/master/gitchess&quot;&gt;Gitchess&lt;/a&gt;. This is
where I had the most fun. Creating a more complex game in BASH proved to
be a difficult but satisfying challenge.&lt;/p&gt;

&lt;p&gt;It was really fun to make, and I&amp;#39;m eager to find out what other types of
command-line games can be built on top of a pattern like this. Be sure to check out the
Gitwar repo &lt;a href=&quot;http://github.com/gitwar/gitwar&quot;&gt;here&lt;/a&gt;. And give me a shoutout on
&lt;a href=&quot;https://twitter.com/share?text=%40tybenz&amp;amp;url=http://tybenz.com/post/gitwar&quot;&gt;Twitter&lt;/a&gt; if you have comments.&lt;/p&gt;
</description>
          <pubDate>Fri, 10 May 2013 00:00:00 -0700</pubDate>
          <link>http://tybenz.com//post/gitwar</link>
          <guid isPermaLink="true">http://tybenz.com//post/gitwar</guid>
        </item>
      
    
      
        <item>
          <title>Lain Lee 3 Design</title>
          <description>&lt;p&gt;Recently I was looking for a designer to collaborate with on a project
called &lt;a href=&quot;/post/codearmory&quot;&gt;Code Armory&lt;/a&gt;. I started looking for online resources to meet some
talented designers. I discovered a site called
&lt;a href=&quot;http://collabfinder.com&quot;&gt;CollabFinder&lt;/a&gt; and immediately realized I had
discovered something of extraordinary value.&lt;/p&gt;

&lt;p&gt;CollabFinder allows you to search for designers, developers, artists,
writers, and scientists by physical location, skills, and interests. You
can pitch them a project you&amp;#39;d like to &amp;quot;collaborate&amp;quot; on (collaboration
in this context, means non-monetary help). &lt;/p&gt;

&lt;p&gt;So I started looking for designers in the San Francisco area, found some
really talented people, sent them a note about the project I needed help
on, and within an hour I had my replies. I quickly started emailing back
and forth with a designer named &lt;a href=&quot;http://twitter.com/lainlee3design&quot;&gt;Lain Lee&lt;/a&gt;.
He told me he needed some help coding his new design site, and asked if
I&amp;#39;d be interested in trading services. We actually met at Starbucks down
the road from my office that same day, and started talking about our ideas
and life in general. We just clicked. Our interests and passions line up so well.
It&amp;#39;s been a great partnership. Today, I&amp;#39;m happy to say we launched
Lain&amp;#39;s &lt;a href=&quot;http://lainlee3design.com&quot;&gt;new site&lt;/a&gt;.
The site was put together with KirbyCMS, a few jQuery plugins, and
some good ol&amp;#39; fashioned elbow grease.&lt;/p&gt;

&lt;p&gt;Quick word about Lain as a designer/illustrator: this guy is one heck of
an artist. Since we&amp;#39;ve started working together I&amp;#39;ve started to follow
his work, and honestly, every thing the guy
creates is pure gold. Check out this
&lt;a href=&quot;http://lainlee3design.com/blog/avengers-assemble-timelapse&quot;&gt;timelapse&lt;/a&gt; of his mad 
illustration skills! The stuff he&amp;#39;s designed for Code Armory is
absolutely perfect. Excellent illustration, web design, and it totally
lines up with my vision for this new project. I&amp;#39;ll be sure to write more
as I move further along with it.&lt;/p&gt;

&lt;p&gt;Make sure you head over and check out his new site
(&lt;a href=&quot;http://lainlee3design.com&quot;&gt;http://lainlee3design.com&lt;/a&gt;). Check out his
portfolio and see what you think. I&amp;#39;d highly recommend him for any of your
design needs.&lt;/p&gt;
</description>
          <pubDate>Wed, 27 Mar 2013 00:00:00 -0700</pubDate>
          <link>http://tybenz.com//post/lainlee3design</link>
          <guid isPermaLink="true">http://tybenz.com//post/lainlee3design</guid>
        </item>
      
    
      
        <item>
          <title>Walkie Pt. 2</title>
          <description>&lt;p&gt;I ported walkie to run as a hubot* script! What does that mean? It means basecamp notifications in your chat room!&lt;/p&gt;

&lt;p&gt;Go to walkie&amp;#39;s hubot page for more info: &lt;a href=&quot;http://walkie.tybenz.com/hubot&quot;&gt;http://walkie.tybenz.com/hubot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/walkie/irc.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;* &lt;a href=&quot;http://hubot.github.com&quot;&gt;http://hubot.github.com&lt;/a&gt;&lt;/p&gt;
</description>
          <pubDate>Fri, 08 Mar 2013 00:00:00 -0800</pubDate>
          <link>http://tybenz.com//post/walkie-pt-2</link>
          <guid isPermaLink="true">http://tybenz.com//post/walkie-pt-2</guid>
        </item>
      
    
      
        <item>
          <title>Walkie Pt. 1</title>
          <description>&lt;p&gt;
Introducing the coolest way to stay in sync with Basecamp. That's right. It's a node.js script that will send you updates via Mountain Lion's Notification Center whenever something's going down at HQ.
&lt;/p&gt;

&lt;p&gt;
Check out Walkie's project page for more info: &lt;a href=&quot;http://walkie.tybenz.com&quot;&gt;http://walkie.tybenz.com&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;div data-picture data-alt=&quot;walkie&quot;&gt;
      &lt;div data-src=&quot;/img/walkie/small.png&quot;&gt;&lt;/div&gt;
      &lt;div data-src=&quot;/img/walkie/big.png&quot; data-media=&quot;(min-width: 412px)&quot;&gt;&lt;/div&gt;
      &lt;noscript&gt;&lt;img src=&quot;/img/walkie/big.png&quot; alt=&quot;walkie&quot;&gt;&lt;/noscript&gt;
  &lt;/div&gt;
&lt;/p&gt;

</description>
          <pubDate>Thu, 28 Feb 2013 00:00:00 -0800</pubDate>
          <link>http://tybenz.com//post/walkie</link>
          <guid isPermaLink="true">http://tybenz.com//post/walkie</guid>
        </item>
      
    
  </channel>
</rss>
